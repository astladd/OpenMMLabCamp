{"env_info": "sys.platform: win32\nPython: 3.9.7 (default, Sep 16 2021, 16:59:28) [MSC v.1916 64 bit (AMD64)]\nCUDA available: False\nMSVC: \u7528\u4e8e x64 \u7684 Microsoft (R) C/C++ \u4f18\u5316\u7f16\u8bd1\u5668 19.16.27045 \u7248\nGCC: n/a\nPyTorch: 1.12.1+cpu\nPyTorch compiling details: PyTorch built with:\n  - C++ Version: 199711\n  - MSVC 192829337\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 2019\n  - LAPACK is enabled (usually provided by MKL)\n  - CPU capability usage: AVX2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/actions-runner/_work/pytorch/pytorch/builder/windows/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=0, USE_CUDNN=OFF, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1+cpu\nOpenCV: 4.6.0\nMMCV: 1.7.0\nMMCV Compiler: MSVC 192829924\nMMCV CUDA Compiler: not available\nMMClassification: 0.25.0+unknown", "seed": 409666168, "mmcls_version": "0.25.0", "config": "model = dict(\n    type='ImageClassifier',\n    backbone=dict(type='MobileNetV3', arch='small'),\n    neck=dict(type='GlobalAveragePooling'),\n    head=dict(\n        type='StackedLinearClsHead',\n        num_classes=5,\n        in_channels=576,\n        mid_channels=[1024],\n        dropout_rate=0.8,\n        act_cfg=dict(type='HSwish'),\n        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),\n        init_cfg=dict(\n            type='Normal', layer='Linear', mean=0.0, std=0.01, bias=0.0),\n        topk=(1, 5)))\ndataset_type = 'CustomDataset'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='RandomResizedCrop', size=224, backend='pillow'),\n    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n    dict(\n        type='AutoAugment',\n        policies=[[{\n            'type': 'Posterize',\n            'bits': 4,\n            'prob': 0.4\n        }],\n                  [{\n                      'type': 'Solarize',\n                      'thr': 113.77777777777777,\n                      'prob': 0.6\n                  }, {\n                      'type': 'AutoContrast',\n                      'prob': 0.6\n                  }],\n                  [{\n                      'type': 'Equalize',\n                      'prob': 0.8\n                  }, {\n                      'type': 'Equalize',\n                      'prob': 0.6\n                  }],\n                  [{\n                      'type': 'Posterize',\n                      'bits': 5,\n                      'prob': 0.6\n                  }, {\n                      'type': 'Posterize',\n                      'bits': 5,\n                      'prob': 0.6\n                  }],\n                  [{\n                      'type': 'Equalize',\n                      'prob': 0.4\n                  }, {\n                      'type': 'Solarize',\n                      'thr': 142.22222222222223,\n                      'prob': 0.2\n                  }],\n                  [{\n                      'type': 'Equalize',\n                      'prob': 0.4\n                  }, {\n                      'type': 'Rotate',\n                      'angle': 26.666666666666668,\n                      'prob': 0.8\n                  }],\n                  [{\n                      'type': 'Solarize',\n                      'thr': 170.66666666666666,\n                      'prob': 0.6\n                  }, {\n                      'type': 'Equalize',\n                      'prob': 0.6\n                  }],\n                  [{\n                      'type': 'Posterize',\n                      'bits': 6,\n                      'prob': 0.8\n                  }, {\n                      'type': 'Equalize',\n                      'prob': 1.0\n                  }],\n                  [{\n                      'type': 'Rotate',\n                      'angle': 10.0,\n                      'prob': 0.2\n                  }, {\n                      'type': 'Solarize',\n                      'thr': 28.444444444444443,\n                      'prob': 0.6\n                  }],\n                  [{\n                      'type': 'Equalize',\n                      'prob': 0.6\n                  }, {\n                      'type': 'Posterize',\n                      'bits': 5,\n                      'prob': 0.4\n                  }],\n                  [{\n                      'type': 'Rotate',\n                      'angle': 26.666666666666668,\n                      'prob': 0.8\n                  }], [{\n                      'type': 'Equalize',\n                      'prob': 0.6\n                  }],\n                  [{\n                      'type': 'Equalize',\n                      'prob': 0.0\n                  }, {\n                      'type': 'Equalize',\n                      'prob': 0.8\n                  }],\n                  [{\n                      'type': 'Invert',\n                      'prob': 0.6\n                  }, {\n                      'type': 'Equalize',\n                      'prob': 1.0\n                  }], [{\n                      'type': 'Contrast',\n                      'magnitude': 0.8,\n                      'prob': 1.0\n                  }],\n                  [{\n                      'type': 'Rotate',\n                      'angle': 26.666666666666668,\n                      'prob': 0.8\n                  }],\n                  [{\n                      'type': 'Solarize',\n                      'thr': 56.888888888888886,\n                      'prob': 0.8\n                  }], [{\n                      'type': 'Sharpness',\n                      'magnitude': 0.7,\n                      'prob': 0.4\n                  }],\n                  [{\n                      'type': 'Shear',\n                      'magnitude': 0.16666666666666666,\n                      'prob': 0.6,\n                      'direction': 'horizontal'\n                  }, {\n                      'type': 'Equalize',\n                      'prob': 1.0\n                  }], [{\n                      'type': 'Equalize',\n                      'prob': 0.6\n                  }],\n                  [{\n                      'type': 'Equalize',\n                      'prob': 0.4\n                  }, {\n                      'type': 'Solarize',\n                      'thr': 142.22222222222223,\n                      'prob': 0.2\n                  }],\n                  [{\n                      'type': 'Solarize',\n                      'thr': 113.77777777777777,\n                      'prob': 0.6\n                  }, {\n                      'type': 'AutoContrast',\n                      'prob': 0.6\n                  }], [{\n                      'type': 'Equalize',\n                      'prob': 1.0\n                  }], [{\n                      'type': 'Contrast',\n                      'magnitude': 0.8,\n                      'prob': 1.0\n                  }],\n                  [{\n                      'type': 'Equalize',\n                      'prob': 0.8\n                  }, {\n                      'type': 'Equalize',\n                      'prob': 0.6\n                  }]]),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='ToTensor', keys=['gt_label']),\n    dict(type='Collect', keys=['img', 'gt_label'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='Resize', size=(256, -1), backend='pillow'),\n    dict(type='CenterCrop', crop_size=224),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='Collect', keys=['img'])\n]\ndata = dict(\n    samples_per_gpu=64,\n    workers_per_gpu=1,\n    train=dict(\n        type='CustomDataset',\n        data_prefix='D:/mmclassification-master/flower_dataset/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='RandomResizedCrop', size=224, backend='pillow'),\n            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n            dict(\n                type='AutoAugment',\n                policies=[[{\n                    'type': 'Posterize',\n                    'bits': 4,\n                    'prob': 0.4\n                }],\n                          [{\n                              'type': 'Solarize',\n                              'thr': 113.77777777777777,\n                              'prob': 0.6\n                          }, {\n                              'type': 'AutoContrast',\n                              'prob': 0.6\n                          }],\n                          [{\n                              'type': 'Equalize',\n                              'prob': 0.8\n                          }, {\n                              'type': 'Equalize',\n                              'prob': 0.6\n                          }],\n                          [{\n                              'type': 'Posterize',\n                              'bits': 5,\n                              'prob': 0.6\n                          }, {\n                              'type': 'Posterize',\n                              'bits': 5,\n                              'prob': 0.6\n                          }],\n                          [{\n                              'type': 'Equalize',\n                              'prob': 0.4\n                          }, {\n                              'type': 'Solarize',\n                              'thr': 142.22222222222223,\n                              'prob': 0.2\n                          }],\n                          [{\n                              'type': 'Equalize',\n                              'prob': 0.4\n                          }, {\n                              'type': 'Rotate',\n                              'angle': 26.666666666666668,\n                              'prob': 0.8\n                          }],\n                          [{\n                              'type': 'Solarize',\n                              'thr': 170.66666666666666,\n                              'prob': 0.6\n                          }, {\n                              'type': 'Equalize',\n                              'prob': 0.6\n                          }],\n                          [{\n                              'type': 'Posterize',\n                              'bits': 6,\n                              'prob': 0.8\n                          }, {\n                              'type': 'Equalize',\n                              'prob': 1.0\n                          }],\n                          [{\n                              'type': 'Rotate',\n                              'angle': 10.0,\n                              'prob': 0.2\n                          }, {\n                              'type': 'Solarize',\n                              'thr': 28.444444444444443,\n                              'prob': 0.6\n                          }],\n                          [{\n                              'type': 'Equalize',\n                              'prob': 0.6\n                          }, {\n                              'type': 'Posterize',\n                              'bits': 5,\n                              'prob': 0.4\n                          }],\n                          [{\n                              'type': 'Rotate',\n                              'angle': 26.666666666666668,\n                              'prob': 0.8\n                          }], [{\n                              'type': 'Equalize',\n                              'prob': 0.6\n                          }],\n                          [{\n                              'type': 'Equalize',\n                              'prob': 0.0\n                          }, {\n                              'type': 'Equalize',\n                              'prob': 0.8\n                          }],\n                          [{\n                              'type': 'Invert',\n                              'prob': 0.6\n                          }, {\n                              'type': 'Equalize',\n                              'prob': 1.0\n                          }],\n                          [{\n                              'type': 'Contrast',\n                              'magnitude': 0.8,\n                              'prob': 1.0\n                          }],\n                          [{\n                              'type': 'Rotate',\n                              'angle': 26.666666666666668,\n                              'prob': 0.8\n                          }],\n                          [{\n                              'type': 'Solarize',\n                              'thr': 56.888888888888886,\n                              'prob': 0.8\n                          }],\n                          [{\n                              'type': 'Sharpness',\n                              'magnitude': 0.7,\n                              'prob': 0.4\n                          }],\n                          [{\n                              'type': 'Shear',\n                              'magnitude': 0.16666666666666666,\n                              'prob': 0.6,\n                              'direction': 'horizontal'\n                          }, {\n                              'type': 'Equalize',\n                              'prob': 1.0\n                          }], [{\n                              'type': 'Equalize',\n                              'prob': 0.6\n                          }],\n                          [{\n                              'type': 'Equalize',\n                              'prob': 0.4\n                          }, {\n                              'type': 'Solarize',\n                              'thr': 142.22222222222223,\n                              'prob': 0.2\n                          }],\n                          [{\n                              'type': 'Solarize',\n                              'thr': 113.77777777777777,\n                              'prob': 0.6\n                          }, {\n                              'type': 'AutoContrast',\n                              'prob': 0.6\n                          }], [{\n                              'type': 'Equalize',\n                              'prob': 1.0\n                          }],\n                          [{\n                              'type': 'Contrast',\n                              'magnitude': 0.8,\n                              'prob': 1.0\n                          }],\n                          [{\n                              'type': 'Equalize',\n                              'prob': 0.8\n                          }, {\n                              'type': 'Equalize',\n                              'prob': 0.6\n                          }]]),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='ToTensor', keys=['gt_label']),\n            dict(type='Collect', keys=['img', 'gt_label'])\n        ]),\n    val=dict(\n        type='CustomDataset',\n        data_prefix='D:/mmclassification-master/flower_dataset/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=(256, -1), backend='pillow'),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]),\n    test=dict(\n        type='CustomDataset',\n        data_prefix='D:/mmclassification-master/flower_dataset/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=(256, -1), backend='pillow'),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]))\nevaluation = dict(\n    interval=1, metric='accuracy', metric_options=dict(topk=(1, )))\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'D:/mmclassification-master/checkpoint/epoch_10.pth'\nresume_from = None\nworkflow = [('train', 1)]\npolicies = [[{\n    'type': 'Posterize',\n    'bits': 4,\n    'prob': 0.4\n}],\n            [{\n                'type': 'Solarize',\n                'thr': 113.77777777777777,\n                'prob': 0.6\n            }, {\n                'type': 'AutoContrast',\n                'prob': 0.6\n            }],\n            [{\n                'type': 'Equalize',\n                'prob': 0.8\n            }, {\n                'type': 'Equalize',\n                'prob': 0.6\n            }],\n            [{\n                'type': 'Posterize',\n                'bits': 5,\n                'prob': 0.6\n            }, {\n                'type': 'Posterize',\n                'bits': 5,\n                'prob': 0.6\n            }],\n            [{\n                'type': 'Equalize',\n                'prob': 0.4\n            }, {\n                'type': 'Solarize',\n                'thr': 142.22222222222223,\n                'prob': 0.2\n            }],\n            [{\n                'type': 'Equalize',\n                'prob': 0.4\n            }, {\n                'type': 'Rotate',\n                'angle': 26.666666666666668,\n                'prob': 0.8\n            }],\n            [{\n                'type': 'Solarize',\n                'thr': 170.66666666666666,\n                'prob': 0.6\n            }, {\n                'type': 'Equalize',\n                'prob': 0.6\n            }],\n            [{\n                'type': 'Posterize',\n                'bits': 6,\n                'prob': 0.8\n            }, {\n                'type': 'Equalize',\n                'prob': 1.0\n            }],\n            [{\n                'type': 'Rotate',\n                'angle': 10.0,\n                'prob': 0.2\n            }, {\n                'type': 'Solarize',\n                'thr': 28.444444444444443,\n                'prob': 0.6\n            }],\n            [{\n                'type': 'Equalize',\n                'prob': 0.6\n            }, {\n                'type': 'Posterize',\n                'bits': 5,\n                'prob': 0.4\n            }], [{\n                'type': 'Rotate',\n                'angle': 26.666666666666668,\n                'prob': 0.8\n            }], [{\n                'type': 'Equalize',\n                'prob': 0.6\n            }],\n            [{\n                'type': 'Equalize',\n                'prob': 0.0\n            }, {\n                'type': 'Equalize',\n                'prob': 0.8\n            }],\n            [{\n                'type': 'Invert',\n                'prob': 0.6\n            }, {\n                'type': 'Equalize',\n                'prob': 1.0\n            }], [{\n                'type': 'Contrast',\n                'magnitude': 0.8,\n                'prob': 1.0\n            }], [{\n                'type': 'Rotate',\n                'angle': 26.666666666666668,\n                'prob': 0.8\n            }], [{\n                'type': 'Solarize',\n                'thr': 56.888888888888886,\n                'prob': 0.8\n            }], [{\n                'type': 'Sharpness',\n                'magnitude': 0.7,\n                'prob': 0.4\n            }],\n            [{\n                'type': 'Shear',\n                'magnitude': 0.16666666666666666,\n                'prob': 0.6,\n                'direction': 'horizontal'\n            }, {\n                'type': 'Equalize',\n                'prob': 1.0\n            }], [{\n                'type': 'Equalize',\n                'prob': 0.6\n            }],\n            [{\n                'type': 'Equalize',\n                'prob': 0.4\n            }, {\n                'type': 'Solarize',\n                'thr': 142.22222222222223,\n                'prob': 0.2\n            }],\n            [{\n                'type': 'Solarize',\n                'thr': 113.77777777777777,\n                'prob': 0.6\n            }, {\n                'type': 'AutoContrast',\n                'prob': 0.6\n            }], [{\n                'type': 'Equalize',\n                'prob': 1.0\n            }], [{\n                'type': 'Contrast',\n                'magnitude': 0.8,\n                'prob': 1.0\n            }],\n            [{\n                'type': 'Equalize',\n                'prob': 0.8\n            }, {\n                'type': 'Equalize',\n                'prob': 0.6\n            }]]\noptimizer = dict(\n    type='RMSprop',\n    lr=0.001,\n    alpha=0.99,\n    momentum=0,\n    eps=0.0316,\n    weight_decay=1e-05)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(policy='step', step=2, gamma=0.973, by_epoch=True)\nrunner = dict(type='EpochBasedRunner', max_epochs=10)\nwork_dir = './work_dirs\\mobilenet_v3_small_imagenet_flower'\ngpu_ids = [0]\ndevice = 'cpu'\nseed = 409666168\n", "CLASSES": ["daisy", "dandelion", "rose", "sunflower", "tulip"]}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 0.001, "data_time": 0.74473, "loss": 0.15408, "time": 3.39355}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.001, "data_time": 0.00708, "loss": 0.10361, "time": 2.5435}
{"mode": "train", "epoch": 1, "iter": 30, "lr": 0.001, "data_time": 0.00738, "loss": 0.12471, "time": 2.53074}
{"mode": "train", "epoch": 1, "iter": 40, "lr": 0.001, "data_time": 0.00748, "loss": 0.11932, "time": 2.37006}
{"mode": "val", "epoch": 1, "iter": 5, "lr": 0.001, "accuracy_top-1": 89.2405}
{"mode": "train", "epoch": 2, "iter": 10, "lr": 0.001, "data_time": 0.2598, "loss": 0.12306, "time": 2.79163}
{"mode": "train", "epoch": 2, "iter": 20, "lr": 0.001, "data_time": 0.00758, "loss": 0.1272, "time": 2.50909}
{"mode": "train", "epoch": 2, "iter": 30, "lr": 0.001, "data_time": 0.00768, "loss": 0.13236, "time": 2.52336}
{"mode": "train", "epoch": 2, "iter": 40, "lr": 0.001, "data_time": 0.00768, "loss": 0.14361, "time": 2.36129}
{"mode": "val", "epoch": 2, "iter": 5, "lr": 0.001, "accuracy_top-1": 88.29114}
{"mode": "train", "epoch": 3, "iter": 10, "lr": 0.00097, "data_time": 0.25802, "loss": 0.14206, "time": 2.78846}
{"mode": "train", "epoch": 3, "iter": 20, "lr": 0.00097, "data_time": 0.00708, "loss": 0.1451, "time": 2.49982}
{"mode": "train", "epoch": 3, "iter": 30, "lr": 0.00097, "data_time": 0.00748, "loss": 0.10462, "time": 2.55467}
{"mode": "train", "epoch": 3, "iter": 40, "lr": 0.00097, "data_time": 0.00698, "loss": 0.14302, "time": 2.37964}
{"mode": "val", "epoch": 3, "iter": 5, "lr": 0.00097, "accuracy_top-1": 88.6076}
{"mode": "train", "epoch": 4, "iter": 10, "lr": 0.00097, "data_time": 0.25593, "loss": 0.12666, "time": 2.80641}
{"mode": "train", "epoch": 4, "iter": 20, "lr": 0.00097, "data_time": 0.00738, "loss": 0.12844, "time": 2.53881}
{"mode": "train", "epoch": 4, "iter": 30, "lr": 0.00097, "data_time": 0.00708, "loss": 0.11229, "time": 2.5073}
{"mode": "train", "epoch": 4, "iter": 40, "lr": 0.00097, "data_time": 0.00728, "loss": 0.11004, "time": 2.3586}
{"mode": "val", "epoch": 4, "iter": 5, "lr": 0.00097, "accuracy_top-1": 87.65823}
{"mode": "train", "epoch": 5, "iter": 10, "lr": 0.00095, "data_time": 0.25347, "loss": 0.07145, "time": 2.77383}
{"mode": "train", "epoch": 5, "iter": 20, "lr": 0.00095, "data_time": 0.00738, "loss": 0.11807, "time": 2.51119}
{"mode": "train", "epoch": 5, "iter": 30, "lr": 0.00095, "data_time": 0.00728, "loss": 0.12361, "time": 2.51598}
{"mode": "train", "epoch": 5, "iter": 40, "lr": 0.00095, "data_time": 0.00738, "loss": 0.08099, "time": 2.3589}
{"mode": "val", "epoch": 5, "iter": 5, "lr": 0.00095, "accuracy_top-1": 89.55696}
{"mode": "train", "epoch": 6, "iter": 10, "lr": 0.00095, "data_time": 0.25827, "loss": 0.13215, "time": 2.76677}
{"mode": "train", "epoch": 6, "iter": 20, "lr": 0.00095, "data_time": 0.00728, "loss": 0.12919, "time": 2.5068}
{"mode": "train", "epoch": 6, "iter": 30, "lr": 0.00095, "data_time": 0.00758, "loss": 0.10632, "time": 2.52126}
{"mode": "train", "epoch": 6, "iter": 40, "lr": 0.00095, "data_time": 0.00768, "loss": 0.12949, "time": 2.36488}
{"mode": "val", "epoch": 6, "iter": 5, "lr": 0.00095, "accuracy_top-1": 90.50632}
{"mode": "train", "epoch": 7, "iter": 10, "lr": 0.00092, "data_time": 0.25632, "loss": 0.10319, "time": 2.7706}
{"mode": "train", "epoch": 7, "iter": 20, "lr": 0.00092, "data_time": 0.00748, "loss": 0.12112, "time": 2.51278}
{"mode": "train", "epoch": 7, "iter": 30, "lr": 0.00092, "data_time": 0.00728, "loss": 0.14571, "time": 2.51229}
{"mode": "train", "epoch": 7, "iter": 40, "lr": 0.00092, "data_time": 0.00698, "loss": 0.15835, "time": 2.38542}
{"mode": "val", "epoch": 7, "iter": 5, "lr": 0.00092, "accuracy_top-1": 89.55696}
{"mode": "train", "epoch": 8, "iter": 10, "lr": 0.00092, "data_time": 0.25773, "loss": 0.11445, "time": 2.78747}
{"mode": "train", "epoch": 8, "iter": 20, "lr": 0.00092, "data_time": 0.00728, "loss": 0.12878, "time": 2.5083}
{"mode": "train", "epoch": 8, "iter": 30, "lr": 0.00092, "data_time": 0.00748, "loss": 0.12332, "time": 2.51049}
{"mode": "train", "epoch": 8, "iter": 40, "lr": 0.00092, "data_time": 0.00728, "loss": 0.10889, "time": 2.36588}
{"mode": "val", "epoch": 8, "iter": 5, "lr": 0.00092, "accuracy_top-1": 87.97469}
{"mode": "train", "epoch": 9, "iter": 10, "lr": 0.0009, "data_time": 0.25892, "loss": 0.10979, "time": 2.7708}
{"mode": "train", "epoch": 9, "iter": 20, "lr": 0.0009, "data_time": 0.00728, "loss": 0.08793, "time": 2.51607}
{"mode": "train", "epoch": 9, "iter": 30, "lr": 0.0009, "data_time": 0.00758, "loss": 0.1076, "time": 2.50939}
{"mode": "train", "epoch": 9, "iter": 40, "lr": 0.0009, "data_time": 0.00748, "loss": 0.12034, "time": 2.36079}
{"mode": "val", "epoch": 9, "iter": 5, "lr": 0.0009, "accuracy_top-1": 89.87341}
{"mode": "train", "epoch": 10, "iter": 10, "lr": 0.0009, "data_time": 0.25925, "loss": 0.09246, "time": 2.76345}
{"mode": "train", "epoch": 10, "iter": 20, "lr": 0.0009, "data_time": 0.00718, "loss": 0.10827, "time": 2.51448}
{"mode": "train", "epoch": 10, "iter": 30, "lr": 0.0009, "data_time": 0.00738, "loss": 0.13574, "time": 2.5059}
{"mode": "train", "epoch": 10, "iter": 40, "lr": 0.0009, "data_time": 0.00758, "loss": 0.14025, "time": 2.34483}
{"mode": "val", "epoch": 10, "iter": 5, "lr": 0.0009, "accuracy_top-1": 89.87341}
